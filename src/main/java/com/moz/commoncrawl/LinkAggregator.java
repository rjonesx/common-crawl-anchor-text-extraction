package com.moz.commoncrawl;

import java.io.IOException;

import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Aggregates and deduplicates the links across multiple paths generated by the
 * WATLinkExtractor.
 **/
public class LinkAggregator extends Configured implements Tool {

    private static final Logger LOG = LoggerFactory
            .getLogger(LinkAggregator.class);

    public static void main(String[] args) throws Exception {
        int res = ToolRunner.run(new LinkAggregator(), args);
        System.exit(res);
    }

    public int run(String[] args) throws Exception {
        // s3://anchorcc/link-/
        String inputPath = args[0];

        // s3://anchorcc/links-2017
        String outputPath = args[1];

        int numReducers = 1;
        if (args.length == 3) {
            numReducers = Integer.parseInt(args[2]);
        }

        LOG.info("Using {} reducers", numReducers);

        Job job = Job.getInstance(getConf(), "LinkAggregator");
        job.setJarByClass(this.getClass());
        job.setInputFormatClass(TextInputFormat.class);
        job.setOutputFormatClass(TextOutputFormat.class);
        FileOutputFormat.setCompressOutput(job, true);
        FileInputFormat.addInputPath(job, new Path(inputPath));
        FileOutputFormat.setOutputPath(job, new Path(outputPath));
        job.setReducerClass(LinkReducer.class);
        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(NullWritable.class);
        return job.waitForCompletion(true) ? 0 : 1;
    }

    static class LinkReducer
            extends Reducer<Text, NullWritable, Text, NullWritable> {
        @Override
        protected void reduce(Text text, Iterable<NullWritable> vals,
                Context context) throws IOException, InterruptedException {
            context.write(text, NullWritable.get());
        }
    }
}
